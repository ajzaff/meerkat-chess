package com.alanjz.meerkat.moves

import com.alanjz.meerkat.moves.Move.{KnightCapture, KnightMove}
import com.alanjz.meerkat.position.mutable.MaskNode
import com.alanjz.meerkat.util.numerics.BitMask
import com.alanjz.meerkat.util.numerics.BitMask.{BitMask, File, Rank}

/**
 * Created by alan on 12/13/14.
 */
class KnightMover(val node : MaskNode) extends IntermediateMover {
  /**
   * Returns all possible moves regardless of legality
   * (Or pseudo-legality).
   *
   * These are specifically attacking moves.
   * This does not include castling, or pawn advances.
   *
   * @param knights the knights mask.
   * @return the attacks possible by this piece.
   */
  override def getAttacks(knights : BitMask): BitMask = {

    // initialize moves.
    var moves = BitMask.empty

    // 1:00
    moves |= (knights & ~Rank._7 & ~Rank._8 & ~File.H) << 17

    // 2:00
    moves |= (knights & ~Rank._8 & ~File.G & ~File.H) << 10

    // 4:00
    moves |= (knights & ~Rank._1 & ~File.G & ~File.H) >>> 6

    // 5:00
    moves |= (knights & ~Rank._1 & ~Rank._2 & ~File.H) >>> 15

    // 7:00
    moves |= (knights & ~Rank._1 & ~Rank._2 & ~File.A) >>> 17

    // 8:00
    moves |= (knights & ~Rank._1 & ~File.A & ~File.B) >>> 10

    // 10:00
    moves |= (knights & ~Rank._8 & ~File.A & ~File.B) << 6

    // 11:00
    moves |= (knights & ~Rank._8 & ~Rank._7 & ~File.A) << 15

    // return moves.
    moves
  }

  /**
   * Gets all pseudo-legal moves generated by this mover.
   * @return all pseudo-legal moves and captures.
   */
  override def getPseudos: BitMask = {

    val active = node.activePieces

    // return moves.
    getAttacks(node.activeKnights) & ~active
  }

  /**
   * Serializes the pseudo-legal moves.
   * @return a list of pseudo-legal moves of the appropriate type.
   */
  override def mkList: List[Move] = {
    val builder = List.newBuilder[Move]
    var moves = getPseudos
    val activeKnights = node.activeKnights

    while(moves != BitMask.empty) {

      val lsb = BitMask.bitScanForward(moves)
      var sources = getAttacks(1l << lsb) & activeKnights

      while(sources != BitMask.empty) {
        val source = BitMask.bitScanForward(sources)
        if(node.empty(lsb)) {
          builder += KnightMove(source, lsb)
        }
        else {
          builder += KnightCapture(source, lsb, node.at(lsb).get)
        }
        sources &= (sources-1)
      }

      moves &= (moves-1)
    }

    builder.result()
  }
}
