package com.alanjz.meerkat.moves

import com.alanjz.meerkat.position.mutable.MaskNode
import com.alanjz.meerkat.util.numerics.BitMask.BitMask

trait IntermediateMover {

  /**
   * The current chess node.
   */

  val node : MaskNode

  /**
   * Returns all possible moves regardless of legality
   * (Or pseudo-legality).
   *
   * These are specifically attacking moves.
   * This does not include castling, or pawn advances.
   *
   * @return the attacks possible by this piece.
   */

  def getAttacks : BitMask

  /**
   * Gets all pseudo-legal moves generated by this mover.
   * @return all pseudo-legal moves and captures.
   */

  def getPseudos : BitMask
}